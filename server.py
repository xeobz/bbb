import requests
import json
import uuid
import base64
from flask import Flask, request

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ API Bitrix24
BITRIX_URL = "https://inwork.bitrix24.ru/rest/8/fjtuc0gmxac1ife0"
BITRIX_TEMPLATE_FILE_ID = "1704"  # ID —Ñ–∞–π–ª–∞-—à–∞–±–ª–æ–Ω–∞ –≤ Bitrix24
BITRIX_REPORT_FOLDER_ID = "666"  # ID –ø–∞–ø–∫–∏ "–û—Ç—á–µ—Ç—ã"
BITRIX_SMART_PROCESS_ID = 1042  # ID —Å–º–∞—Ä—Ç-–ø—Ä–æ—Ü–µ—Å—Å–∞
BITRIX_ITEM_UPDATE_URL = f"{BITRIX_URL}/crm.item.update"
BITRIX_DISK_DOWNLOAD_URL = f"{BITRIX_URL}/disk.file.get"
BITRIX_DISK_UPLOAD_URL = f"{BITRIX_URL}/disk.folder.uploadfile"
BITRIX_FILE_FIELD = "ufCrm8_1741619470239"  # –ü–æ–ª–µ –¥–ª—è —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ñ–∞–π–ª

app = Flask(__name__)

def download_template():
    """ –°–∫–∞—á–∏–≤–∞–µ—Ç —à–∞–±–ª–æ–Ω –∏–∑ Bitrix24 """
    download_response = requests.post(BITRIX_DISK_DOWNLOAD_URL, json={"id": BITRIX_TEMPLATE_FILE_ID})
    download_data = download_response.json()
    if "result" not in download_data or "DOWNLOAD_URL" not in download_data["result"]:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —à–∞–±–ª–æ–Ω–∞: {download_data}")
        return None
    
    file_url = download_data["result"]["DOWNLOAD_URL"]
    file_response = requests.get(file_url)
    if file_response.status_code == 200:
        return file_response.content
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞: {file_response.status_code}")
        return None

import io

def upload_template_and_update(item_id):
    """ –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∞–π–ª-—à–∞–±–ª–æ–Ω –≤ –ø–∞–ø–∫—É '–û—Ç—á–µ—Ç—ã' –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–¥–µ–ª–∫—É —Å—Å—ã–ª–∫–æ–π """
    file_content = download_template()
    if not file_content:
        return
    
    unique_id = uuid.uuid4().hex[:8]  # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID
    new_file_name = f"–°—Ü–µ–Ω–∞—Ä–∏–π –ø—Ä–æ–¥–∞–∂_{unique_id}.xlsx"

    # 1. –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º URL –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
    upload_url_response = requests.post(BITRIX_DISK_UPLOAD_URL, json={"id": BITRIX_REPORT_FOLDER_ID})
    upload_url_data = upload_url_response.json()

    if "result" not in upload_url_data or "uploadUrl" not in upload_url_data["result"]:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è uploadUrl: {upload_url_data}")
        return

    upload_url = upload_url_data["result"]["uploadUrl"]

    # 2. –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª —á–µ—Ä–µ–∑ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π uploadUrl
    files = {"file": (new_file_name, io.BytesIO(file_content))}
    upload_file_response = requests.post(upload_url, files=files)
    upload_file_data = upload_file_response.json()

    if "result" not in upload_file_data or not upload_file_data["result"].get("ID"):
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: {upload_file_data}")
        return

    new_file_id = upload_file_data["result"]["ID"]
    new_file_url = upload_file_data["result"].get("DETAIL_URL", "")
    print(f"‚úÖ –§–∞–π–ª {new_file_name} –∑–∞–≥—Ä—É–∂–µ–Ω, ID: {new_file_id}, URL: {new_file_url}")

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–¥–µ–ª–∫—É —Å—Å—ã–ª–∫–æ–π –Ω–∞ —Ñ–∞–π–ª
    update_response = requests.post(BITRIX_ITEM_UPDATE_URL, json={
        "entityTypeId": BITRIX_SMART_PROCESS_ID,
        "id": item_id,
        "fields": {BITRIX_FILE_FIELD: new_file_url}
    })
    
    if update_response.json().get("result"):
        print(f"‚úÖ –°–¥–µ–ª–∫–∞ {item_id} –æ–±–Ω–æ–≤–ª–µ–Ω–∞ —Å—Å—ã–ª–∫–æ–π –Ω–∞ —Ñ–∞–π–ª.")
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏ {item_id}: {update_response.json()}")

@app.route("/", methods=["GET", "POST"])
def handle_request():
    item_id = request.args.get("item_id") or (request.get_json() or {}).get("item_id")
    if not item_id:
        return "‚ùå –û—à–∏–±–∫–∞: –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω item_id", 400
    
    print(f"üîÑ –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–¥–µ–ª–∫–∏ {item_id}")
    upload_template_and_update(item_id)
    
    return f"‚úÖ –®–∞–±–ª–æ–Ω –∑–∞–≥—Ä—É–∂–µ–Ω –∏ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–¥–µ–ª–∫—É {item_id}"

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=8080)
